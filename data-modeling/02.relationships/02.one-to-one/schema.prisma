// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // üê® once you've made the UserImage model, add an optional image property here
  image UserImage?
  notes Note[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  // üê® once you've made the NoteImage model, add an images property that's an
  // array of NoteImage models
  images NoteImage[]
}

// üê® add the UserImage model here. It should have the following properties
model UserImage {
  // - id: similar to the other id properties we have so far
  id          String  @id @default(cuid())
  // - altText: an optional string
  altText     String?
  // - contentType: a required string
  contentType String
  // - blob: a Bytes type
  blob        Bytes

  // - createdAt: just like the others we have already
  createdAt DateTime @default(now())
  // - updatedAt: just like the others we have already
  updatedAt DateTime @updatedAt

  // - user: a user with a relationship attribute
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // - userId: a string with the @unique attribute establishing the one-to-one relationship
  userId String @unique
}

// üê® add the NoteImage model here. It should have the following properties
model NoteImage {
  // - id: similar to the other id properties we have so far
  id          String  @id @default(cuid())
  // - altText: an optional string
  altText     String?
  // - contentType: a required string
  contentType String
  // - blob: a Bytes type
  blob        Bytes

  // - createdAt: just like the others we have already
  createdAt DateTime @default(now())
  // - updatedAt: just like the others we have already
  updatedAt DateTime @updatedAt

  // - note: a note with a relationship attribute
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // - noteId: a string
  noteId String
}
